function F = create_PBCFLAF_NLMS(M, muNLMS, muFL, exord, memord, Mi, Me, deltaNLMS, deltaFL)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CREATE STRUCTURE: PRIORITY-BASED COLLABORATIVE FUNCTIONAL LINK ADAPTIVE
% FILTER (PBCFLAF) USING NORMALIZED LEAST MEAN SQUARES (NLMS) ALGORITHM.
%
% 30 May 2013
% Danilo Comminiello
%
% Department of Information, Electronic and Telecommunication Engineering 
% 'Sapienza' University of Rome
% Via Eudossiana,18, I-00184 Roma, Italy
%
%
% DESCRIPTION:
% Combination of a linear NLMS filter and three nonlinear FLAF.
% Each nonlinear FLAF results from the convex combination with an all-zero 
% kernel.
% The NLMS filter is updated using the overall error signal, while the
% nonlinear filters are updated using the local error signals.
%
%
% INPUT PARAMETERS:
%   M: filter length
%   muL: step size of the linear filter
%   muFL: step size vector for the nonlinear FLAFs [3,1]
%   exord: expansion order vector [3,1]
%   memord: memory order - memord = 0 for memoryless functional links
%   Mi: vector containing the lengths of the FL input buffers [3,1]
%   Me: vector containing the lengths of the expanded buffers [3,1]
%   deltaL: regularization parameter of the linear filter
%   deltaFL: regularization parameter of the NLMS-FLAF nonlinear filter
%
% OUTPUT PARAMETERS:
%   F.M: filter length
%   F.muNLMS: step size of the NLMS filter
%   F.muFL: step size vector for the nonlinear FLAFs [3,1]
%   F.exord: expansion order vector [3,1]
%   F.memord: memory order - memord = 0 for memoryless functional links
%   F.Mi: vector containing the lengths of the FL input buffers [3,1]
%   F.Me: vector containing the lengths of the expanded buffers [3,1]
%   F.deltaNLMS: regularization parameter of the NLMS filter
%   F.deltaFL: regularization parameter of the FL nonlinear filter
%   F.exord2: number of different sin and cos for each sample
%   F.deltac: auxiliary index for functional expansion
%   F.xBuff: input buffer [M x 1]
%   F.wNLMS: coefficient vector for the NLMS filter [M x 1]
%   F.wFL: coefficient vector for the FL filter [Me x 1]
%   F.a: adaptation parameter vector [1,3]
%   F.pa: power factor vector [3,1]
%   F.mua: step size vector of the adaptation parameters [3,1]
%   F.beta: power combination factor
%
%
% REFERENCES:
%   [1] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Link Adaptive Filters for 
%       Nonlinear Acoustic Echo Cancellation", in IEEE Transactions on 
%       Audio, Speech and Language Processing, vol. 21, no. 7, pp. 
%       1502-1512, July 2013.
%   [2] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Links Based Architectures for 
%       Nonlinear Acoustic Echo Cancellation", HSCMA' 11, Edinburh, UK, 
%       May 2011.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin < 8
    deltaNLMS = 1e-3;                                                                               % Default value for the regularization factor of the NLMS filter
end
if nargin < 9
    deltaFL = deltaNLMS;                                                                            % Default value for the regularization factor of the NLMS-FLAF filter
end
if nargin < 6
    Mi = ones(3,1)*round((1/8)*M);                                                                  % Default length of the FL input buffer selected for the expansion
end
if nargin < 5
    memord = 0;                                                                                     % Memoryless functional link for default
end
if nargin < 4
    exord = [3; 5; 3];                                                                              % Default expansion orders for Chebyshev, trigonometric and Legendre expansions
end
if nargin < 3
    muFL = 0.1*ones(3,1);                                                                           % Default step size values for the nonlinear FLAFs
end
if nargin < 2
    muNLMS = 0.2;                                                                                   % Default step size value for the NLMS filter
end
exord2 = 2*exord(2);                                                                                % Number of sin and cos for trigonometric expansion
if nargin < 7
    Me = Mi*exord;                                                                                  % Initialization of the vector of expanded buffer lengths - This is the right length for Chebyshev and Legendre expansions
    Me(2) = Mi*(exord2) + (Mi-memord)*(memord*exord2) + sum(((2:memord)-1)*exord2);                 % Length of the expanded buffer for trigonometric expansion
end
xBuff = zeros(M,1);                                                                                 % Input buffer inizialization
wNLMS = zeros(M,1);                                                                                 % Coefficient vector inizialization for the NLMS filter
wFL1 = zeros(Me(1),1);                                                                              % Coefficient vector inizialization for the first FLAF
wFL2 = zeros(Me(2),1);                                                                              % Coefficient vector inizialization for the second FLAF
wFL3 = zeros(Me(3),1);                                                                              % Coefficient vector inizialization for the third FLAF
a = zeros(1,3);                                                                                     % Adaptation parameter vector initialization
pa = ones(3,1);                                                                                     % Power factor initialization
mua = 1*ones(3,1);                                                                                % Step size of the adaptation parameter
beta = 0.9;                                                                                         % Power combination factor

F = struct('M', M, 'muNLMS', muNLMS, 'muFL', muFL, 'exord', exord,...
    'memord', memord, 'Mi', Mi, 'Me', Me, 'deltaNLMS', deltaNLMS,...
    'deltaFL', deltaFL, 'exord2', exord2, 'xBuff', xBuff, 'wNLMS',...
    wNLMS, 'wFL1', wFL1, 'wFL2', wFL2, 'wFL3', wFL3, 'a', a, 'pa', pa,...
    'mua', mua, 'beta', beta);                                                                             % Structure of the NLMS adaptive filter