function [e, lambda, F] = fnct_CFLAF_NLMS(x, d, F)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ON-LINE FUNCTION: COLLABORATIVE FUNCTIONAL LINK ADAPTIVE FILTER (CFLAF)
% USING NORMALIZED LEAST MEAN SQUARES (NLMS) ALGORITHM.
%
% 8 October 2010
% 30 May 2013
% Danilo Comminiello
%
% Department of Information, Electronic and Telecommunication Engineering 
% 'Sapienza' University of Rome
% Via Eudossiana,18, I-00184 Roma, Italy
%
%
% DESCRIPTION:
% Combination of a linear NLMS filter and a nonlinear filter.
% The nonlinear filter is the result of the convex combination
% between a nonlinear FLAF and an all-zero kernel.
% The NLMS filter is updated using the overall error signal, while the
% nonlinear filter is updated using the local error signal, being the
% linear error part of the nonlinear desired signal.
%
%
% INPUT PARAMETERS:
%   x: input signal sample at n-th time instant
%   d: desired signal sample at n-th time instant
%   F.M: filter length
%   F.muNLMS: step size of the NLMS filter
%   F.muFL: step size of the NLMS-FLAF nonlinear filter
%   F.exord: expansion order
%   F.memord: memory order - memord = 0 for memoryless functional links
%   F.Mi: length of the FL input buffer selected for the expansion
%   F.Me: length of the expanded buffer
%   F.deltaNLMS: regularization parameter of the NLMS filter
%   F.deltaFL: regularization parameter of the FL nonlinear filter
%   F.exord2: number of different sin and cos for each sample
%   F.xBuff: input buffer [M x 1]
%   F.wNLMS: coefficient vector for the NLMS filter [M x 1]
%   F.wFL: coefficient vector for the FL filter [Me x 1]
%   F.exp_type: index of functional expansion type
%   F.a: adaptation parameter
%   F.pa: power factor
%   F.mua: step size of the adaptation parameter
%   F.beta: power combination factor
%
% OUTPUT PARAMETERS:
%   e: error signal sample at n-th time instant
%   lambda: shrinkage parameter at time instant n+1
%   F.M: filter length
%   F.muNLMS: step size of the NLMS filter
%   F.muFL: step size of the NLMS-FLAF nonlinear filter
%   F.exord: expansion order
%   F.memord: memory order - memord = 0 for memoryless functional links
%   F.Mi: length of the FL input buffer selected for the expansion
%   F.Me: length of the expanded buffer
%   F.deltaNLMS: regularization parameter of the NLMS filter
%   F.deltaFL: regularization parameter of the FL nonlinear filter
%   F.exord2: number of different sin and cos for each sample
%   F.xBuff: input buffer [M x 1]
%   F.wNLMS: coefficient vector for the NLMS filter [M x 1]
%   F.wFL: coefficient vector for the FL filter [Me x 1]
%   F.exp_type: index of functional expansion type
%   F.a: adaptation parameter
%   F.pa: power factor
%   F.mua: step size of the adaptation parameter
%   F.beta: power combination factor
%
%
% REFERENCES: 
%   [1] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Link Adaptive Filters for 
%       Nonlinear Acoustic Echo Cancellation", in IEEE Transactions on 
%       Audio, Speech and Language Processing, vol. 21, no. 7, pp. 
%       1502-1512, July 2013.
%   [2] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Links Based Architectures for 
%       Nonlinear Acoustic Echo Cancellation", HSCMA' 11, Edinburh, UK, 
%       May 2011.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%----------Update input signal buffer-----------------------------------------------%
F.xBuff(2:F.M) = F.xBuff(1:F.M-1);                                                  % Shift temporary input signal buffer down
F.xBuff(1) = x;                                                                     % Assign current input signal sample

%----------Functional link expansion------------------------------------------------%
g = flex(F.xBuff, F.Mi, F.Me, F.exord, F.memord, F.exp_type);                       % Generate the expanded buffer

%----------Compute individual output signals----------------------------------------%
normNLMS = F.xBuff'*F.xBuff + F.deltaNLMS;                                          % Norm of the input layer vector for the NLMS filter
normFL = g'*g + F.deltaFL;                                                          % Norm of the input layer vector for the NLMS-FLAF filter
yNLMS = F.wNLMS'*F.xBuff;                                                           % Compute the output signal for the NLMS filter
yFL = F.wFL'*g;                                                                   % Compute the output signal for the NLMS-FLAF filter
eFL = d - (yNLMS + yFL);                                                            % Compute the error signal for the NLMS-FLAF filter
    
%----------Compute the shrinkage parameter---------------------------------------------%
if abs(F.a) > 4                                                                     % Limit the adaptation parameter
    F.a = sign(F.a)*4;
end
lambda = logsig(F.a);                                                               % Compute the combination parameter
F.pa = F.beta*F.pa + (1 - F.beta)*(yFL^2);                                          % Power normalization estimation

%----------Compute overall output and error signals---------------------------------%
y = yNLMS + lambda*yFL;                                                             % Combination of individual output signals
e = d - y;                                                                          % Overall error signal

%----------Update the filters-------------------------------------------------------%
F.wNLMS = F.wNLMS + (F.muNLMS/normNLMS)*e*F.xBuff;                                  % Update of the NLMS filter
F.wFL = F.wFL + (F.muFL/normFL)*eFL*g;                                            % Update of the NLMS-FLAF filter

%----------Update the adaptation parameter------------------------------------------%
F.a = F.a + (F.mua/F.pa)*e*yFL*lambda*(1 - lambda);                                 % NLMS adaptation of the shrinkage parameter

