function F = create_CFLAF_NLMS(M, muNLMS, muFL, exord, memord, Mi, Me, deltaNLMS, deltaFL, type)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CREATE STRUCTURE: COLLABORATIVE FUNCTIONAL LINK ADAPTIVE FILTER (CFLAF)
% USING NORMALIZED LEAST MEAN SQUARES (NLMS) ALGORITHM.
%
% 8 October 2010
% 30 May 2013
% Danilo Comminiello
%
%
% DESCRIPTION:
% Combination of a linear NLMS filter and a nonlinear filter.
% The nonlinear filter is the result of the convex combination
% between a nonlinear FLAF and an all-zero kernel.
% The NLMS filter is updated using the overall error signal, while the
% nonlinear filter is updated using the local error signal, being the
% linear error part of the nonlinear desired signal.
%
%
% INPUT PARAMETERS:
%   M: filter length
%   muL: step size of the linear filter
%   muFL: step size of the NLMS-FLAF nonlinear filter
%   exord: expansion order
%   memord: memory order - memord = 0 for memoryless functional links
%   Mi: length of the FL input buffer selected for the expansion
%   Me: length of the expanded buffer
%   deltaL: regularization parameter of the linear filter
%   deltaFL: regularization parameter of the NLMS-FLAF nonlinear filter
%   type: functional expansion type
%
% OUTPUT PARAMETERS:
%   F.M: filter length
%   F.muNLMS: step size of the NLMS filter
%   F.muFL: step size of the NLMS-FLAF nonlinear filter
%   F.exord: expansion order
%   F.memord: memory order - memord = 0 for memoryless functional links
%   F.Mi: length of the FL input buffer selected for the expansion
%   F.Me: length of the expanded buffer
%   F.deltaNLMS: regularization parameter of the NLMS filter
%   F.deltaFL: regularization parameter of the FL nonlinear filter
%   F.exord2: number of different sin and cos for each sample
%   F.xBuff: input buffer [M x 1]
%   F.wNLMS: coefficient vector for the NLMS filter [M x 1]
%   F.wFL: coefficient vector for the FL filter [Me x 1]
%   F.exp_type: index of functional expansion type
%   F.a: adaptation parameter
%   F.pa: power factor
%   F.mua: step size of the adaptation parameter
%   F.beta: power combination factor
%
%
% REFERENCES:
%   [1] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Link Adaptive Filters for 
%       Nonlinear Acoustic Echo Cancellation", in IEEE Transactions on 
%       Audio, Speech and Language Processing, vol. 21, no. 7, pp. 
%       1502-1512, July 2013.
%   [2] D. Comminiello, L.A. Azpicueta-Ruiz, M. Scarpiniti, A. Uncini and 
%       J. Arenas- García, "Functional Links Based Architectures for 
%       Nonlinear Acoustic Echo Cancellation", HSCMA' 11, Edinburh, UK, 
%       May 2011.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin < 10
    type = 'Tri';                                                                                   % Trigonometric expansion as default expansion type
end
if strcmp('Tri',type)
    exp_type = 1;
   
elseif strcmp('Cheb',type)
    exp_type = 2;
elseif strcmp('Leg',type)
    exp_type = 3;
else
    error('Invalid expansion type!')
end
if nargin < 8
    deltaNLMS = 1e-3;                                                                               % Default value for the regularization factor of the NLMS filter
end
if nargin < 9
    deltaFL = deltaNLMS;                                                                            % Default value for the regularization factor of the NLMS-FLAF filter
end
if nargin < 6
    Mi = round((1/8)*M);                                                                            % Default length of the FL input buffer selected for the expansion
end
if nargin < 5
    memord = 0;                                                                                     % Memoryless functional link for default
end
if nargin < 4
    exord = 5;                                                                                      % Default FLAF expansion order
end
if nargin < 3
    muFL = 0.1;                                                                                     % Default step size value for the NLMS-FLAF filter
end
if nargin < 2
    muNLMS = 0.2;                                                                                   % Default step size value for the NLMS filter
end
exord2 = 2*exord;                                                                                   % Number of sin and cos for trigonometric expansion
if nargin < 7
    if exp_type == 1
        Me = Mi*(exord2) + (Mi-memord)*(memord*exord2) + sum(((2:memord)-1)*exord2);                % Length of the expanded buffer for trigonometric expansion
    else
        Me = Mi*exord;                                                                              % Length of the expanded buffer for Chebyshev and Legendre expansion
    end
end
xBuff = zeros(M,1);                                                                                 % Input buffer inizialization
wNLMS = zeros(M,1);                                                                                 % Coefficient vector inizialization for the NLMS filter
wFL = zeros(Me,1);                                                                                  % Coefficient vector inizialization for the NLMS-FLAF nonlinear filter
a = 0;                                                                                              % Adaptation parameter initialization
pa = 1;                                                                                             % Power factor initialization
mua = 0.9;                                                                                          % Step size of the adaptation parameter
beta = 0.9;                                                                                         % Power combination factor

F = struct('M', M, 'muNLMS', muNLMS, 'muFL', muFL, 'exord', exord,...
    'memord', memord, 'Mi', Mi, 'Me', Me, 'deltaNLMS', deltaNLMS,...
    'deltaFL', deltaFL, 'exord2', exord2, 'xBuff', xBuff, 'wNLMS',...
    wNLMS, 'wFL', wFL, 'exp_type', exp_type, 'a', a, 'pa', pa, 'mua',...
    mua, 'beta', beta);                          
% Structure of the NLMS adaptive filter
